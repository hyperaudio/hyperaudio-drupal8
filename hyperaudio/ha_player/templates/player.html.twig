{% if variant == 'player' %}
<h1>{{ title }}</h1>
<script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.5.0/velocity.js"></script>
<p>
  <form id="searchForm" style="float:right">
    <!-- comment out the following line if you don't need playback rate controls -->
    Playback Rate <span id="currentPbr">1</span><input id="pbr" type="range" value="1" min="0.5" max="3" step="0.1" style="width:10%">
    <input id="search" type="text" ><input type="submit" value="search">
  </form>
</p>

<video id="hyperplayer" style="z-index: 5000000; position:relative; width:400px" src="{{ media }}" type="audio/mp4" controls></video>

<div id="hypertranscript" style="overflow-y:scroll; height:600px; position:relative; border-style:dashed; border-width: 1px; border-color:#999; padding: 8px">
  {{ transcript | raw }}
</div>

<script src="https://estevanmaito.github.io/sharect/sharect.min.js"></script>

<script>
var sharect = new Sharect();
  sharect.config({
    /*facebook: true,*/
    twitter: true,
    twitterUsername: '%23hashtag', /*hashtag example*/
    /*backgroundColor: '#ff4081',*/
    iconColor: '#fff'
  }).init();
</script>
{% endif %}


{% if variant == 'pad' %}
  <link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesheet">

  <style>
    /* demo layout */
    html, body {
      text-align: center;
      font-family: 'Merriweather', serif;
      line-height: 1.7em;
      word-spacing: 0.1em;
    }

    main {
      margin: 0 auto;
      width: 1300px;
    }

    main > section {
      float: left;
      width: 50%;
      width: 640px;
      text-align: left;
    }

    main > section + section {
      margin-left: 20px;
    }

    main > header {
      background-color: #d74b36;
      height: 60px;
      margin-bottom: 1em;
      text-align: left;
    }

    /*#d74b36*/
    ::selection {
      background: #87d8e7;
      text-shadow: none;
      /*color: white;*/
    }
  </style>

  <style>
    /* hyperaudio styles */
    .hyperaudio-sink .hyperaudio-effect:focus {
      border-left: 2px solid #d74b36;
      outline: none;
    }

    .hyperaudio-source .hyperaudio-transcript {
      border-left: 1px solid transparent;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-sink .hyperaudio-transcript {
      border-left: 1px solid transparent;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-sink .hyperaudio-transcript:focus {
      border-left: 1px solid red;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-transcript {
      border-top: 0 solid white;
      transition: border-top 0.15s;
    }

    .hyperaudio-sink .hyperaudio-transcript.hyperaudio-over {
      border-top: 2em solid #e9f8fb;
      transition: border-top 0.15s;
    }

    /* FIXME */
    .hyperaudio-sink article > div {
      height: 10em;
      background-color: transparent;
      transition: background-color 0.15s;
    }

    .hyperaudio-sink article.over > div {
      height: 10em;
      background-color: #e9f8fb;
      transition: background-color 0.15s;
    }

    .hyperaudio-player header, .hyperaudio-player video {
      max-width: 634px;
      max-height: 360px;
      margin-bottom: 2em;
      background-color: black;
    }

    .hyperaudio-player:not(.hyperaudio-source) *[data-t] {
        cursor: pointer;
    }

    .hyperaudio-player video {
      width: 100%;
    }

    .hyperaudio-player p {
      color: #658898;
      margin: 0;
      padding: .5em 0;
    }

    .hyperaudio-player .hyperaudio-past {
      color: black;
    }

    .hyperaudio-player .hyperaudio-active {
      color: #d74b36;
    }

    .hyperaudio-source .hyperaudio-selected, hyperaudio-player .hyperaudio-active.hyperaudio-selected {
      /*background-color: lightpink;*/
      background: #87d8e7;
      text-shadow: none;
      /*color: white;*/
    }

    /*.hyperaudio-effect {
      background-color: #fafaff;
      padding: .5em;
    }

    .hyperaudio-effect input {
      width: 33%;
    }*/
  </style>
  <main>
    <header>
      <select></select>
    </header>
    <!-- Player -->
    <section id="player" class="hyperaudio-player hyperaudio-source">
      <header class="hyperaudio-media">
        <video src="{{ media }}" type="audio/mp4" controls></video>
      </header>

      <article>
        {{ transcript | raw }}
      </article>
    </section>

    <!-- Remixer -->
    <section id="remixer" class="hyperaudio-player hyperaudio-sink">
      <header class="hyperaudio-media">
      </header>

      <article>
        <div>
          <!-- drop area -->
        </div>
      </article>
    </section>

  </main>


  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script>
    document
      .querySelectorAll('.hyperaudio-sink')
      .forEach(sinkNode => new window.Sink(sinkNode));

    function load(data) {
      console.log(data);

      document.querySelector('.hyperaudio-player')
        .querySelector('article').innerHTML = data.content;

      var section = document.querySelector('.hyperaudio-player')
          .querySelector('article section');

      section.setAttribute('data-src', data.media.source.mp4.url);
      section.setAttribute('data-type', data.media.source.mp4.type);
      section.classList.add('hyperaudio-transcript');


      document
        .querySelectorAll('.hyperaudio-source')
        .forEach(sourceNode => new window.Source(sourceNode));
    }

    function loadURL(url, callback) {
      console.log(url);
      axios.get(url)
        .then(function(response) {
          callback(response.data);
        })
        .catch(function(error) {
          console.log(error);
        });
    }

    function loadID(id, callback) {
      console.log(id);
      loadURL('http://studsterkel.api.hyperaud.io/v1/transcripts/' + id, callback);
    }

    function loadMediaID(id, callback) {
      console.log(id);
      loadURL('http://studsterkel.api.hyperaud.io/v1/media/' + id + '/transcripts', function(data){
        // callback(data[0]);
        loadID(data[0]._id, load);
      });
    }


    loadURL('http://studsterkel.api.hyperaud.io/v1/media', function(data) {
      console.log(data);
      var select = document.querySelector('select');
      data.forEach(function(media) {
        if (media.channel !== 'Interviews') return;
        var option = document.createElement('option');
        option.innerText = media.label;
        option.setAttribute('value', media._id);
        select.appendChild(option);
      });

      select.addEventListener('change', function(event) {
        loadMediaID(this.value, load);
      });
    });

  </script>
<{% endif %}>



{% if variant == 'player2' %}

  <link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesheet">

  <style>
    /* demo layout */
    html, body {
      text-align: center;
      font-family: 'Merriweather', serif;
      line-height: 1.7em;
      word-spacing: 0.1em;
    }

    main {
      margin: 0 auto;
      width: 640px;
    }

    main > section {
      float: left;
      width: 50%;
      width: 640px;
      text-align: left;
    }

    main > section + section {
      margin-left: 20px;
    }

    main > header {
      background-color: #d74b36;
      height: 60px;
      margin-bottom: 1em;
      text-align: left;
    }

    /*#d74b36*/
    ::selection {
      background: #87d8e7;
      text-shadow: none;
      /*color: white;*/
    }
  </style>

  <style>
    /* hyperaudio styles */
    .hyperaudio-sink .hyperaudio-effect:focus {
      border-left: 2px solid #d74b36;
      outline: none;
    }

    .hyperaudio-source .hyperaudio-transcript {
      border-left: 1px solid transparent;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-sink .hyperaudio-transcript {
      border-left: 1px solid transparent;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-sink .hyperaudio-transcript:focus {
      border-left: 1px solid red;
      border-right: 1px solid transparent;
      padding-left: 1em;
      padding-right: 1em;
      outline: none;
    }

    .hyperaudio-transcript {
      border-top: 0 solid white;
      transition: border-top 0.15s;
    }

    .hyperaudio-sink .hyperaudio-transcript.hyperaudio-over {
      border-top: 2em solid #e9f8fb;
      transition: border-top 0.15s;
    }

    /* FIXME */
    .hyperaudio-sink article > div {
      height: 10em;
      background-color: transparent;
      transition: background-color 0.15s;
    }

    .hyperaudio-sink article.over > div {
      height: 10em;
      background-color: #e9f8fb;
      transition: background-color 0.15s;
    }

    .hyperaudio-player header, .hyperaudio-player video {
      max-width: 634px;
      max-height: 360px;
      margin-bottom: 2em;
      background-color: black;
    }

    .hyperaudio-player:not(.hyperaudio-source) *[data-t] {
        cursor: pointer;
    }

    .hyperaudio-player video {
      width: 100%;
    }

    .hyperaudio-player p {
      color: #658898;
      margin: 0;
      padding: .5em 0;
    }

    .hyperaudio-player .hyperaudio-past {
      color: black;
    }

    .hyperaudio-player .hyperaudio-active {
      color: #d74b36;
    }

    .hyperaudio-player .hyperaudio-duration {
      border-bottom: 1px solid #d74b36;
    }

    .hyperaudio-source .hyperaudio-selected, hyperaudio-player .hyperaudio-active.hyperaudio-selected {
      /*background-color: lightpink;*/
      background: #87d8e7;
      text-shadow: none;
      /*color: white;*/
    }

    /*.hyperaudio-effect {
      background-color: #fafaff;
      padding: .5em;
    }

    .hyperaudio-effect input {
      width: 33%;
    }*/
  </style>

  <main>
    <header>
      <!-- <select></select> -->
    </header>
    <!-- Player -->
    <section id="player" class="hyperaudio-player">
      <header class="hyperaudio-media">
        <video src="{{ media }}" type="audio/mp4" controls></video>
      </header>

      <article>
        {{ transcript | raw }}
      </article>
    </section>

  </main>
{% endif %}
