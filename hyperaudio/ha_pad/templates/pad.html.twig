{% if variant == 'player' %}

<h1>{{ title }}</h1>

<div class="hyperaudio-main">
<link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesheet">
<style scoped>
  .hyperaudio-main {
    margin: 0 auto;
    /* width: 640px; */
    font-family: 'Merriweather', serif;
    line-height: 1.7em;
    word-spacing: 0.1em;
  }

  .hyperaudio-main > section {
    float: left;
    width: 50%;
    width: 640px;
    text-align: left;
  }

  .hyperaudio-main > section + section {
    margin-left: 20px;
  }

  ::selection {
    background: #87d8e7;
    text-shadow: none;
  }
</style>
  <section id="player" class="hyperaudio-player">
    <header class="hyperaudio-media">
      <video src="{{ media }}" type="video/mp4" controls></video>
    </header>

    <article>
      <section data-src="{{ media }}" data-type="video/mp4" class="hyperaudio-transcript">
        {{ transcript | raw }}
      <section>
    </article>
  </section>
</div>

{% endif %}
{% if variant == 'pad' %}

<div class="hyperaudio-main">
<link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesheet">
<style>
  /* demo layout */
  .hyperaudio-main {
    text-align: center;
    font-family: 'Merriweather', serif;
    line-height: 1.7em;
    word-spacing: 0.1em;
  }

  .hyperaudio-main {
    display: flex;
    flex-direction: column;
    text-align: left;
  }

  .hyperaudio-main > header {
    flex-basis: 60px;
    background-color: #d74b36;
  }

  .hyperaudio-main > div {
    flex-basis: 100%;
    display: flex;
  }

  .hyperaudio-main > div > section {
    flex-basis: 50%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }

  .hyperaudio-main > div > section > article {
    flex-basis: 100%;
  }

  ::selection {
    background: #87d8e7;
    text-shadow: none;
  }
</style>

<style>
  /* hyperaudio styles */
  .hyperaudio-sink .hyperaudio-effect:focus {
    border-left: 2px solid #d74b36;
    outline: none;
  }

  .hyperaudio-source .hyperaudio-transcript {
    border-left: 1px solid transparent;
    border-right: 1px solid transparent;
    padding-left: 1em;
    padding-right: 1em;
    outline: none;
  }

  .hyperaudio-sink .hyperaudio-transcript {
    border-left: 1px solid transparent;
    border-right: 1px solid transparent;
    padding-left: 1em;
    padding-right: 1em;
    outline: none;
  }

  .hyperaudio-sink .hyperaudio-transcript:focus {
    border-left: 1px solid red;
    border-right: 1px solid transparent;
    padding-left: 1em;
    padding-right: 1em;
    outline: none;
  }

  .hyperaudio-transcript {
    border-top: 0 solid white;
    transition: border-top 0.15s;
  }

  .hyperaudio-sink .hyperaudio-transcript.hyperaudio-over {
    border-top: 2em solid #e9f8fb;
    transition: border-top 0.15s;
  }

  /* FIXME */
  /*.hyperaudio-sink article > div {
    height: 10em;
    background-color: transparent;
    transition: background-color 0.15s;
  }

  .hyperaudio-sink article.over > div {
    height: 10em;
    background-color: #e9f8fb;
    transition: background-color 0.15s;
  }*/

  .hyperaudio-player header {
    flex-basis: 360px;
    /*max-width: 634px;*/
    max-height: 360px;
    margin-bottom: 2em;
    background-color: black;
  }

  .hyperaudio-player:not(.hyperaudio-source) *[data-t] {
      cursor: pointer;
  }

  .hyperaudio-player video {
    width: 100%;
    height: 100%;
    /*max-width: 634px;*/
  }

  .hyperaudio-player p {
    color: #658898;
    margin: 0;
    padding: .5em 0;
  }

  .hyperaudio-player .hyperaudio-past {
    color: black;
  }

  .hyperaudio-player .hyperaudio-active {
    color: #d74b36;
  }

  .hyperaudio-source .hyperaudio-selected, hyperaudio-player .hyperaudio-active.hyperaudio-selected {
    /*background-color: lightpink;*/
    background: #87d8e7;
    text-shadow: none;
    /*color: white;*/
  }

  /*.hyperaudio-effect {
    background-color: #fafaff;
    padding: .5em;
  }

  .hyperaudio-effect input {
    width: 33%;
  }*/
</style>


<header>
  <select id="media"></select>
  <select id="remixes"></select>
</header>

<div>
  <!-- Player -->
  <section id="player" class="hyperaudio-player hyperaudio-source">
    <header class="hyperaudio-media">
      <video src="{{ media }}" type="video/mp4" controls></video>
    </header>

    <article>
      <section data-src="{{ media }}" data-type="video/mp4" class="hyperaudio-transcript">
        {{ transcript | raw }}
      <section>
    </article>
  </section>

  <!-- Remixer -->
  <section id="remixer" class="hyperaudio-player hyperaudio-sink">
    <header class="hyperaudio-media">
      <video src="{{ media }}" type="video/mp4" controls></video>
    </header>

    <article>
      <!-- <div> -->
        <!-- drop area -->
      <!-- </div> -->
      <section class="hyperaudio-effect"></section>
    </article>
  </section>

</div>


</div>

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<!-- <script src="hyperaudio.js"></script> -->
<script>
  document
    .querySelectorAll('.hyperaudio-sink')
    .forEach(sinkNode => new window.Sink(sinkNode));

  function load(data) {
    // console.log(data);

    // document.querySelector('.hyperaudio-player')
    //  .querySelector('article').innerHTML = data.content;

    document.querySelector('.hyperaudio-player')
      .querySelector('article').innerHTML = data.content.replace('<article>', '').replace('</article>', '').replace(new RegExp('<a', 'g'), '<span').replace(new RegExp('</a>', 'g'), '</span>');


    var section = document.querySelector('.hyperaudio-player')
        .querySelector('article section');

    section.setAttribute('data-src', data.media.source.mp4.url);
    section.setAttribute('data-type', data.media.source.mp4.type);
    section.classList.add('hyperaudio-transcript');

    // window.hyperaudio = new window.Hyperaudio();

    document
      .querySelectorAll('.hyperaudio-source')
      .forEach(sourceNode => new window.Source(sourceNode));
  }

  function loadURL(url, callback) {
    // console.log(url);
    axios.get(url)
      .then(function(response) {
        callback(response.data);
      })
      .catch(function(error) {
        console.log(error);
      });
  }

  function loadID(id, callback) {
    // console.log(id);
    loadURL('http://studsterkel.api.hyperaud.io/v1/transcripts/' + id, callback);
  }

  function loadMediaID(id, callback) {
    console.log(id);
    loadURL('http://studsterkel.api.hyperaud.io/v1/media/' + id + '/transcripts', function(data){
      // callback(data[0]);
      loadID(data[0]._id, load);
    });
  }

  // default
  // loadURL('http://studsterkel.api.hyperaud.io/v1/transcripts/UO5wDCaqSRawl22uTb6ciw', load);
  // loadID('UO5wDCaqSRawl22uTb6ciw', load);
  // loadID("ORdQOjpETuKGv9OwiWnEMQ", load);

  loadURL('http://studsterkel.api.hyperaud.io/v1/media', function(data) {
    // console.log(data);
    var select = document.querySelector('select#media');
    data.forEach(function(media) {
      if (media.channel !== 'Interviews') return;
      var option = document.createElement('option');
      option.innerText = media.label;
      option.setAttribute('value', media._id);
      select.appendChild(option);
    });

    select.addEventListener('change', function(event) {
      loadMediaID(this.value, load);
    });
  });

  loadURL('http://studsterkel.api.hyperaud.io/v1/mixes', function(data) {
    console.log(data);
    // var select = document.querySelector('select#media');
    // data.forEach(function(media) {
    //   if (media.channel !== 'Interviews') return;
    //   var option = document.createElement('option');
    //   option.innerText = media.label;
    //   option.setAttribute('value', media._id);
    //   select.appendChild(option);
    // });
    //
    // select.addEventListener('change', function(event) {
    //   loadMediaID(this.value, load);
    // });
  });

</script>

{% endif %}
